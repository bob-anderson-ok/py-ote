# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'simple_plot.ui'
#
# Created by: PyQt5 UI code generator 5.9
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1392, 960)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.splitter_2 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        self.splitter_2.setObjectName("splitter_2")
        self.widget = QtWidgets.QWidget(self.splitter_2)
        self.widget.setObjectName("widget")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.infoButton = QtWidgets.QPushButton(self.widget)
        self.infoButton.setObjectName("infoButton")
        self.horizontalLayout_7.addWidget(self.infoButton)
        self.readData = QtWidgets.QPushButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readData.sizePolicy().hasHeightForWidth())
        self.readData.setSizePolicy(sizePolicy)
        self.readData.setToolTipDuration(-1)
        self.readData.setObjectName("readData")
        self.horizontalLayout_7.addWidget(self.readData)
        self.horizontalLayout_7.setStretch(1, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.showSecondaryCheckBox = QtWidgets.QCheckBox(self.widget)
        self.showSecondaryCheckBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.showSecondaryCheckBox.sizePolicy().hasHeightForWidth())
        self.showSecondaryCheckBox.setSizePolicy(sizePolicy)
        self.showSecondaryCheckBox.setMaximumSize(QtCore.QSize(307, 16777215))
        self.showSecondaryCheckBox.setObjectName("showSecondaryCheckBox")
        self.horizontalLayout_6.addWidget(self.showSecondaryCheckBox)
        self.secondarySelector = QtWidgets.QSpinBox(self.widget)
        self.secondarySelector.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.secondarySelector.sizePolicy().hasHeightForWidth())
        self.secondarySelector.setSizePolicy(sizePolicy)
        self.secondarySelector.setMinimum(1)
        self.secondarySelector.setMaximum(4)
        self.secondarySelector.setObjectName("secondarySelector")
        self.horizontalLayout_6.addWidget(self.secondarySelector)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.showTimestampErrors = QtWidgets.QCheckBox(self.widget)
        self.showTimestampErrors.setEnabled(False)
        self.showTimestampErrors.setObjectName("showTimestampErrors")
        self.verticalLayout.addWidget(self.showTimestampErrors)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.doBlockIntegration = QtWidgets.QPushButton(self.widget)
        self.doBlockIntegration.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.doBlockIntegration.sizePolicy().hasHeightForWidth())
        self.doBlockIntegration.setSizePolicy(sizePolicy)
        self.doBlockIntegration.setObjectName("doBlockIntegration")
        self.horizontalLayout_10.addWidget(self.doBlockIntegration)
        self.setDataLimits = QtWidgets.QPushButton(self.widget)
        self.setDataLimits.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.setDataLimits.sizePolicy().hasHeightForWidth())
        self.setDataLimits.setSizePolicy(sizePolicy)
        self.setDataLimits.setToolTipDuration(-1)
        self.setDataLimits.setObjectName("setDataLimits")
        self.horizontalLayout_10.addWidget(self.setDataLimits)
        self.verticalLayout.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.smoothSecondaryButton = QtWidgets.QPushButton(self.widget)
        self.smoothSecondaryButton.setEnabled(False)
        self.smoothSecondaryButton.setObjectName("smoothSecondaryButton")
        self.horizontalLayout_5.addWidget(self.smoothSecondaryButton)
        self.numSmoothPointsEdit = QtWidgets.QLineEdit(self.widget)
        self.numSmoothPointsEdit.setEnabled(False)
        self.numSmoothPointsEdit.setFrame(True)
        self.numSmoothPointsEdit.setObjectName("numSmoothPointsEdit")
        self.horizontalLayout_5.addWidget(self.numSmoothPointsEdit)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.normalizeButton = QtWidgets.QPushButton(self.widget)
        self.normalizeButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.normalizeButton.sizePolicy().hasHeightForWidth())
        self.normalizeButton.setSizePolicy(sizePolicy)
        self.normalizeButton.setObjectName("normalizeButton")
        self.verticalLayout.addWidget(self.normalizeButton)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.markDzone = QtWidgets.QPushButton(self.widget)
        self.markDzone.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.markDzone.sizePolicy().hasHeightForWidth())
        self.markDzone.setSizePolicy(sizePolicy)
        self.markDzone.setObjectName("markDzone")
        self.horizontalLayout_2.addWidget(self.markDzone)
        self.markRzone = QtWidgets.QPushButton(self.widget)
        self.markRzone.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.markRzone.sizePolicy().hasHeightForWidth())
        self.markRzone.setSizePolicy(sizePolicy)
        self.markRzone.setObjectName("markRzone")
        self.horizontalLayout_2.addWidget(self.markRzone)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.minEventLabel = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.minEventLabel.sizePolicy().hasHeightForWidth())
        self.minEventLabel.setSizePolicy(sizePolicy)
        self.minEventLabel.setMinimumSize(QtCore.QSize(50, 0))
        self.minEventLabel.setObjectName("minEventLabel")
        self.horizontalLayout_3.addWidget(self.minEventLabel)
        self.minEventEdit = QtWidgets.QLineEdit(self.widget)
        self.minEventEdit.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.minEventEdit.sizePolicy().hasHeightForWidth())
        self.minEventEdit.setSizePolicy(sizePolicy)
        self.minEventEdit.setMinimumSize(QtCore.QSize(0, 0))
        self.minEventEdit.setMaximumSize(QtCore.QSize(70, 16777215))
        self.minEventEdit.setObjectName("minEventEdit")
        self.horizontalLayout_3.addWidget(self.minEventEdit)
        self.maxEventLabel = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maxEventLabel.sizePolicy().hasHeightForWidth())
        self.maxEventLabel.setSizePolicy(sizePolicy)
        self.maxEventLabel.setObjectName("maxEventLabel")
        self.horizontalLayout_3.addWidget(self.maxEventLabel)
        self.maxEventEdit = QtWidgets.QLineEdit(self.widget)
        self.maxEventEdit.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maxEventEdit.sizePolicy().hasHeightForWidth())
        self.maxEventEdit.setSizePolicy(sizePolicy)
        self.maxEventEdit.setMaximumSize(QtCore.QSize(70, 16777215))
        self.maxEventEdit.setObjectName("maxEventEdit")
        self.horizontalLayout_3.addWidget(self.maxEventEdit)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.DandR = QtWidgets.QRadioButton(self.widget)
        self.DandR.setChecked(True)
        self.DandR.setObjectName("DandR")
        self.horizontalLayout.addWidget(self.DandR)
        self.Donly = QtWidgets.QRadioButton(self.widget)
        self.Donly.setObjectName("Donly")
        self.horizontalLayout.addWidget(self.Donly)
        self.Ronly = QtWidgets.QRadioButton(self.widget)
        self.Ronly.setObjectName("Ronly")
        self.horizontalLayout.addWidget(self.Ronly)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.locateEvent = QtWidgets.QPushButton(self.widget)
        self.locateEvent.setEnabled(False)
        self.locateEvent.setObjectName("locateEvent")
        self.horizontalLayout_4.addWidget(self.locateEvent)
        self.calcErrBars = QtWidgets.QPushButton(self.widget)
        self.calcErrBars.setEnabled(False)
        self.calcErrBars.setObjectName("calcErrBars")
        self.horizontalLayout_4.addWidget(self.calcErrBars)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.progressBar = QtWidgets.QProgressBar(self.widget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout_8.addWidget(self.progressBar)
        self.cancelButton = QtWidgets.QPushButton(self.widget)
        self.cancelButton.setObjectName("cancelButton")
        self.horizontalLayout_8.addWidget(self.cancelButton)
        self.horizontalLayout_8.setStretch(0, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_8)
        spacerItem = QtWidgets.QSpacerItem(284, 13, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.writePlot = QtWidgets.QPushButton(self.widget)
        self.writePlot.setEnabled(False)
        self.writePlot.setObjectName("writePlot")
        self.horizontalLayout_9.addWidget(self.writePlot)
        self.writeBarPlots = QtWidgets.QPushButton(self.widget)
        self.writeBarPlots.setEnabled(False)
        self.writeBarPlots.setObjectName("writeBarPlots")
        self.horizontalLayout_9.addWidget(self.writeBarPlots)
        self.verticalLayout.addLayout(self.horizontalLayout_9)
        self.startOver = QtWidgets.QPushButton(self.widget)
        self.startOver.setEnabled(False)
        self.startOver.setObjectName("startOver")
        self.verticalLayout.addWidget(self.startOver)
        self.horizontalLayout_11.addLayout(self.verticalLayout)
        self.mainPlot = PlotWidget(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainPlot.sizePolicy().hasHeightForWidth())
        self.mainPlot.setSizePolicy(sizePolicy)
        self.mainPlot.setMinimumSize(QtCore.QSize(800, 0))
        self.mainPlot.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.mainPlot.setObjectName("mainPlot")
        self.horizontalLayout_11.addWidget(self.mainPlot)
        self.splitter = QtWidgets.QSplitter(self.splitter_2)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setHandleWidth(12)
        self.splitter.setObjectName("splitter")
        self.table = QtWidgets.QTableWidget(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.table.sizePolicy().hasHeightForWidth())
        self.table.setSizePolicy(sizePolicy)
        self.table.setMinimumSize(QtCore.QSize(0, 0))
        self.table.setToolTipDuration(4000)
        self.table.setRowCount(11)
        self.table.setColumnCount(4)
        self.table.setObjectName("table")
        self.textOut = QtWidgets.QTextEdit(self.splitter)
        self.textOut.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.textOut.setUndoRedoEnabled(False)
        self.textOut.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.textOut.setReadOnly(True)
        self.textOut.setObjectName("textOut")
        self.gridLayout.addWidget(self.splitter_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PY-OTE"))
        self.infoButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">Click this button to to open the </span><span style=\" font-size:18pt; color:#ff0000;\">help.pdf</span><span style=\" font-size:18pt;\"> file that is included in the installation.  The file will open in whatever PDF viewer you have assigned as the default viewer for pdf files.</span></p></body></html>"))
        self.infoButton.setText(_translate("MainWindow", "Info"))
        self.readData.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">PYOTE reads Limovie, R-OTE, and Tangra files including any secondary reference stars that may be present.</span></p><p><span style=\" font-size:14pt;\">Assumed is: object1 is occulted star; other (optional) objects are reference stars to be used for normalizing the occulted star light curve.</span></p><p><span style=\" font-size:14pt; font-weight:600; text-decoration: underline; color:#0000ff;\">Mouse button functions within the light curve plot:</span></p><p><span style=\" font-size:14pt; font-weight:600; color:#ff0000;\">Left click</span><span style=\" font-size:14pt;\">: selects/deselects points on the primary (dark blue) light curve that intersect with the vertical hairline (the mouse cursor is disabled).</span></p><p><span style=\" font-size:14pt; font-weight:600; color:#ff0000;\">Left click and drag</span><span style=\" font-size:14pt;\">: rectangular zoom is available to more clearly see points for selection (but point selection can also be accomplished through clicks in the tabular data display at the lower left)</span></p><p><span style=\" font-size:14pt; font-weight:600;\">Note! The shift key will toggle the mouse cursor on/off in the light curve plot.</span><span style=\" font-size:14pt;\"> This enables the starting corner for the zoom to be seen. (But points cannot be selected/deselected while the mouse cursor is visible. A right click will always \'blank\' the mouse cursor.) </span></p><p><span style=\" font-size:14pt; font-weight:600; color:#ff0000;\">Right click</span><span style=\" font-size:14pt;\">: undo zoom</span></p><p><span style=\" font-size:14pt; color:#996633;\">Timestamp errors are shown with vertical red hairlines when a file is first read. These will disappear after the first point is selected so that the working view is as clear as possible. The red hairlines will re-appear permanently after the error bars have been calculated and the final report written to the log.</span></p></body></html>"))
        self.readData.setText(_translate("MainWindow", "Read light curve"))
        self.showSecondaryCheckBox.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">The display of the secondary star can be turned off. This is useful if the secondary star trace overlaps the main star. The secondary star data remains available for smoothing and normalization, even if it is not beilg displayed.</span></p></body></html>"))
        self.showSecondaryCheckBox.setText(_translate("MainWindow", "Show secondary star"))
        self.secondarySelector.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">If there are multiple reference stars in the file, this spinner will activate to allow the choice of which one to display/use.</span></p></body></html>"))
        self.showTimestampErrors.setText(_translate("MainWindow", "Show timestamp errors"))
        self.doBlockIntegration.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-family:\'arial,sans-serif\'; font-size:18pt; color:#222222;\">For light curves from integrated videos:</span></p><p><span style=\" font-family:\'arial,sans-serif\'; font-size:18pt; color:#222222;\">Zoom into a small portion of the light curve and locate a clearly identifiable group of data points that belong to an integration block, click on the first and last point of that data point group, then press this button to integrate all such groups in the light curve into a single data points.</span></p></body></html>"))
        self.doBlockIntegration.setText(_translate("MainWindow", "Block integrate"))
        self.setDataLimits.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">If exactly two data points have been selected, this button will </span><span style=\" font-size:18pt; font-weight:600; text-decoration: underline;\">trim</span><span style=\" font-size:18pt;\"> off (exclude) data points to the left and right of the selected points.</span></p><p><span style=\" font-size:18pt;\">If no points have been selected, then all data points will be selected as the default.</span></p></body></html>"))
        self.setDataLimits.setText(_translate("MainWindow", "Trim left/right"))
        self.smoothSecondaryButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">Smooth the secondary (reference) star light curve using a Savitsky-Golay filter with a default window of 101 points (the edit box to the right allows for this value to be changed) and a degree 3 interpolating polynomial, applied twice.</span></p><p><span style=\" font-size:18pt;\">The secondary star does not have to be visible for this smoothing to take place.</span></p><p><span style=\" font-size:18pt;\">Smoothing of the secondary curve is a prerequisite to normalizing the occulted star light curve.</span></p></body></html>"))
        self.smoothSecondaryButton.setText(_translate("MainWindow", "Smooth secondary"))
        self.numSmoothPointsEdit.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">This edit box allows you to change the number of points used in Savitsky-Golay filter during smoothing of the secondary star. The window size should be an odd number in the range of 5 up to the number of data points in the secondary curve.</span></p><p><span style=\" font-size:18pt;\">If an even number is specified, the window size used will be one less than that number.</span></p><p><span style=\" font-size:18pt;\">Pressing </span><span style=\" font-size:18pt; font-weight:600; color:#ff0000;\">tab</span><span style=\" font-size:18pt;\"> or </span><span style=\" font-size:18pt; font-weight:600; color:#ff0000;\">return</span><span style=\" font-size:18pt;\"> at completion of data entry will trigger the smoothing, or you can click on the Smooth secondary button</span></p></body></html>"))
        self.numSmoothPointsEdit.setText(_translate("MainWindow", "101"))
        self.normalizeButton.setText(_translate("MainWindow", "Normalize around selected point"))
        self.markDzone.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-family:\'arial,sans-serif\'; font-size:18pt; color:#222222;\">Select two points in the primary (dark blue) light curve, one on each side of where the star ‘disappears’, then click this button to create a D search area.</span><br/></p><p><span style=\" font-family:\'arial,sans-serif\'; font-size:18pt; color:#222222;\">If no points are selected, a search for a D transition will not be performed --- this becomes an \'R only\' event.</span></p></body></html>"))
        self.markDzone.setText(_translate("MainWindow", "Mark D region"))
        self.markRzone.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-family:\'arial,sans-serif\'; font-size:18pt; color:#222222;\">Select two points in the primary (dark blue) light curve, one on each side of where the star ‘reappears’, then click this button to create an R search area.</span><br/></p><p><span style=\" font-family:\'arial,sans-serif\'; font-size:18pt; color:#222222;\">If no points are selected, a search for an R transition will not be performed --- this becomes a \'D only\' event.</span></p></body></html>"))
        self.markRzone.setText(_translate("MainWindow", "Mark R region"))
        self.minEventLabel.setText(_translate("MainWindow", "min event:"))
        self.minEventEdit.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">Enter smallest event size (in number of readings) to search for.</span></p></body></html>"))
        self.maxEventLabel.setText(_translate("MainWindow", "max event:"))
        self.maxEventEdit.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">Enter largest event size (in number of readings) to search for.</span></p></body></html>"))
        self.DandR.setText(_translate("MainWindow", "D:R"))
        self.Donly.setText(_translate("MainWindow", "D"))
        self.Ronly.setText(_translate("MainWindow", "R"))
        self.locateEvent.setText(_translate("MainWindow", "Find event"))
        self.calcErrBars.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">To get a \'Final Report\', error bars are required.  Clicking this button will start the computation of those error bars and, when complete, trigger the preparation of a \'Final Report\'</span></p></body></html>"))
        self.calcErrBars.setText(_translate("MainWindow", "Calc err bars"))
        self.cancelButton.setText(_translate("MainWindow", "Cancel"))
        self.writePlot.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">Note: At the conclusion of error bar calculations, PYOTE automatically writes the main plot to a png file using the name and directory of the just-processed csv file. </span></p><p><span style=\" font-size:18pt;\">If you want/need to record other versions of that plot, click here to open a dialog that will let you specify a different name and/or location for the storage of the new graphics.</span><br/></p></body></html>"))
        self.writePlot.setText(_translate("MainWindow", "Write main plot"))
        self.writeBarPlots.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">Note: At the conclusion of error bar calculations, PYOTE automatically writes the error bar plots to appropriately named png files using the name and directory of the just-processed csv file. </span></p><p><span style=\" font-size:18pt;\">If you want/need to record other versions of those plots, click here to open a dialog that will let you specify a different name and/or location for the storage of the new graphics.</span></p></body></html>"))
        self.writeBarPlots.setText(_translate("MainWindow", "Write error bar plot"))
        self.startOver.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">Clicking here erases all intermediate results and returns the program to the state it had immediately after the initial </span><span style=\" font-size:18pt; font-weight:600; font-style:italic;\">Read light curve</span><span style=\" font-size:18pt;\"> click/selection.</span></p></body></html>"))
        self.startOver.setText(_translate("MainWindow", "Start over"))
        self.table.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt;\">Clicking on a data row (at the extreme left) in this panel will cause the corresponding point to be highlighted in the light curve plot. The highlighted point is shown as a largish yellow dot with a red rim --- it may be hard to see/find, but look for it.</span></p><p><span style=\" font-size:18pt; font-weight:600;\">Clicking on a data cell in a row will select/deselect that point in the primary (dark blue) light curve plot. This is provided as an alternative method to clicking on points in the main light curve plot to select/deslect them.</span></p><p><span style=\" font-size:18pt;\">Note: Clicking on a point in the primary (dark blue) light curve will cause the data row for that point to be selected/positioned.</span></p></body></html>"))

from pyqtgraph import PlotWidget
